import os
import pickle as pkl

from operator import itemgetter


# Tested
def post_processing(output_directory, mu_threshold=0.5, beta_threshold=25, phi_threshold=0.25, store_results=True, print_results=True):
    """
    post process the interpretation results generated by the interpretation method based on Algorithm 1 in the paper
    :param output_directory: the output directory to store the results
    :param mu_threshold:
    :param beta_threshold:
    :param phi_threshold:
    :param store_results:
    :param print_results:
    """

    # ------------------------------------------------------------------------------------------------------------------
    # load the interpretation features count and the average relevance score of the interpretation features

    with open(os.path.join(output_directory, 'count_IF.pkl'), 'rb') as f:
        Freq = pkl.load(f)

    with open(os.path.join(output_directory, 'average_IF.pkl'), 'rb') as f:
        Ravg = pkl.load(f)

    # ------------------------------------------------------------------------------------------------------------------
    # post process the interpretation features based on Algorithm 1

    # final dictionary
    final_IF = dict()

    for category, sub_dict in Ravg.items():
        for word, value in sub_dict.items():
            if value >= mu_threshold and Freq[category][word] >= beta_threshold and len(word) >= 2:
                is_true = True
                for category_idx in range(len(Ravg)):
                    if category_idx in Ravg and category_idx != category:
                        if word not in Ravg[category_idx] or value >= Ravg[category_idx][word] + phi_threshold:
                            continue
                        else:
                            is_true = False
                            break
                if is_true:
                    final_IF.setdefault(category, dict())
                    final_IF[category][word] = value

    print(f'Post-processing is over, the length of the interpretation_features dict for all categories: {len(final_IF)}')

    # ------------------------------------------------------------------------------------------------------------------
    # print and store the results

    if store_results:
        with open(os.path.join(output_directory, 'final_IF.pkl'), 'wb') as f:
            pkl.dump(final_IF, f, pkl.HIGHEST_PROTOCOL)

    if print_results:
        for key, value in final_IF.items():
            print(f'The interpretation features of class: {key} is :')
            for item in sorted(value.items(), key=itemgetter(1)):
                print('{} : {:.2f}'.format(item[0], item[1]))
            print(f'The length of the dictionary for class {key} is = {len(value)}')
